name: Deploy Production
on:
#   release:
#     types:
#       - published
  push:
    branches:
      - main
jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:    
      - name: Git checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Setup AWS CLI
        uses: aws-actions/configure-aws-credentials@master
        with:
          aws-access-key-id: ${{ secrets.CI_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.CI_AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.CI_AWS_DEFAULT_REGION }}
          role-to-assume: ${{ secrets.PRODUCTION_AWS_ROLE_TO_ASSUME }}
          role-external-id: githubactions
          role-duration-seconds: 7200

      - name: Log in Docker Client to ECR
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build and Push Image to ECR
        run: |
          docker pull ${{ secrets.FLAGSMITHAPI_ECR_REPOSITORY_URL }}:latest || true
          docker build --cache-from ${{ secrets.FLAGSMITHAPI_ECR_REPOSITORY_URL }}:latest -t ${{ secrets.FLAGSMITHAPI_ECR_REPOSITORY_URL }}:${{ github.sha }} -t ${{ secrets.FLAGSMITHAPI_ECR_REPOSITORY_URL }}:latest .
          docker push ${{ secrets.FLAGSMITHAPI_ECR_REPOSITORY_URL }} --all-tags

      - name: Download latest ECS task definition
        run: aws ecs describe-task-definition --task-definition godzilla-production-flagsmith --query taskDefinition > task-definition.json

      - name: Render new ECS task definition
        id: render-task-definition
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: task-definition.json
          container-name: flagsmith
          image: ${{ secrets.FLAGSMITHAPI_ECR_REPOSITORY_URL }}:${{ github.sha }}
          environment-variables: |
            DD_VERSION=${{  github.ref_name }}
            DD_GIT_REPOSITORY_URL=https://github.com/flagsmith-app/flagsmith
            DD_GIT_COMMIT_SHA=${{ github.sha }}
            DD_GIT_BRANCH=main
    #   - name: output task def
    #     run: |
    #       cat ${{ steps.render-task-definition.outputs.task-definition }}


      - name: Deploy to ECS service
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.render-task-definition.outputs.task-definition }}
          cluster: godzilla-production
          service: godzilla-production-flagsmith
          wait-for-service-stability: true
          wait-for-minutes: 60

      - name: Slack failure notification
        run: |
          curl -X POST --data '{"text":":airplane_departure: <!here> `Deploy Flagsmith` Succeeded! <https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}|See Workflow>"}' ${{ secrets.SLACK_WEBHOOK_URL }}
      - name: Slack failure notification
        if: failure()
        run: |
          curl -X POST --data '{"text":":rotating_light: <!here> `Deploy Flagsmith` failed! <https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}|See Workflow>"}' ${{ secrets.SLACK_WEBHOOK_URL }}
          
